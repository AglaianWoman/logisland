/**
 * Copyright (C) 2017 Hurence
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.hurence.logisland.processor.bro;

import com.google.common.collect.Lists;
import com.hurence.logisland.annotation.documentation.CapabilityDescription;
import com.hurence.logisland.annotation.documentation.Tags;
import com.hurence.logisland.component.PropertyDescriptor;
import com.hurence.logisland.processor.*;
import com.hurence.logisland.record.Record;
import com.hurence.logisland.validator.StandardValidators;
import com.hurence.logisland.validator.ValidationContext;
import com.hurence.logisland.validator.ValidationResult;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import static java.util.stream.Collectors.joining;

import java.util.Collection;
import java.util.List;

/**
 * Bro (https://www.bro.org/) processor
 */
@Tags({"bro"})
@CapabilityDescription(
        "The Bro (https://www.bro.org) processor is the Logisland entry point to get and process Bro events."
        + " The Bro-Kafka plugin (https://github.com/bro/bro-plugins/tree/master/kafka ) should be used and configured"
        + " in order to have Bro events sent to Kafka  Then this Bro processor will do some minor pre-processing on"
        + " incoming Bro events to adapt them to Logisland. Then following processor in the stream can then process the"
        + " Bro events generated by this Bro processor.")
public class BroProcessor extends AbstractProcessor {

    private static Logger logger = LoggerFactory.getLogger(BroProcessor.class);

    @Override
    public void init(final ProcessContext context)
    {
    }
    
    @Override
    public List<PropertyDescriptor> getSupportedPropertyDescriptors() {
        // TODO Auto-generated method stub
        return null;
    }
  
    @Override
    public Collection<Record> process(ProcessContext context, Collection<Record> records)
    {
        logger.debug("Processed records ");



        Collection<Record> outputRecords = null;
      
        

        return outputRecords;
    }
    
    @Override
    public void onPropertyModified(PropertyDescriptor descriptor, String oldValue, String newValue) {

        logger.info("property {} value changed from {} to {}", descriptor.getName(), oldValue, newValue);              
    }   
}
