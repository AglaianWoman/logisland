{
  "plugins": [
    {
      "name": "ConvertFieldsType",
      "description": "Converts a field value into the given type. does nothing if converison is not possible",
      "component": "com.hurence.logisland.processor.ConvertFieldsType",
      "type": "processor",
      "tags": [
        "type",
        "fields",
        "update",
        "convert"
      ],
      "dynamicProperties": [
        {
          "name": "field",
          "value": "the new type",
          "description": "convert field value into new type",
          "isExpressionLanguageSupported": true
        }
      ]
    },
    {
      "name": "DebugStream",
      "description": "This is a processor that logs incoming records",
      "component": "com.hurence.logisland.processor.DebugStream",
      "type": "processor",
      "tags": [
        "record",
        "debug"
      ],
      "properties": [
        {
          "name": "event.serializer",
          "isRequired": true,
          "description": "the way to serialize event",
          "Json serialization": "serialize events as json blocs",
          "String serialization": "serialize events as toString() blocs",
          "defaultValue": "json",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        }
      ]
    },
    {
      "name": "DetectOutliers",
      "description": "Outlier Analysis: A Hybrid Approach\nIn order to function at scale, a two-phase approach is taken\n\nFor every data point\n\n- Detect outlier candidates using a robust estimator of variability (e.g. median absolute deviation) that uses distributional sketching (e.g. Q-trees)\n- Gather a biased sample (biased by recency)\n- Extremely deterministic in space and cheap in computation\n\nFor every outlier candidate\n\n- Use traditional, more computationally complex approaches to outlier analysis (e.g. Robust PCA) on the biased sample\n- Expensive computationally, but run infrequently\n\nThis becomes a data filter which can be attached to a timeseries data stream within a distributed computational framework (i.e. Storm, Spark, Flink, NiFi) to detect outliers.",
      "component": "com.hurence.logisland.processor.DetectOutliers",
      "type": "processor",
      "tags": [
        "analytic",
        "outlier",
        "record",
        "iot",
        "timeseries"
      ],
      "properties": [
        {
          "name": "value.field",
          "isRequired": true,
          "description": "the numeric field to get the value",
          "defaultValue": "record_value",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "time.field",
          "isRequired": true,
          "description": "the numeric field to get the value",
          "defaultValue": "record_time",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "output.record.type",
          "isRequired": false,
          "description": "the output type of the record",
          "defaultValue": "alert_match",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "rotation.policy.type",
          "isRequired": true,
          "description": "...",
          "by_amount": null,
          "by_time": null,
          "never": null,
          "defaultValue": "by_amount",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "rotation.policy.amount",
          "isRequired": true,
          "description": "...",
          "defaultValue": "100",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "rotation.policy.unit",
          "isRequired": true,
          "description": "...",
          "milliseconds": null,
          "seconds": null,
          "hours": null,
          "days": null,
          "months": null,
          "years": null,
          "points": null,
          "defaultValue": "points",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "chunking.policy.type",
          "isRequired": true,
          "description": "...",
          "by_amount": null,
          "by_time": null,
          "never": null,
          "defaultValue": "by_amount",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "chunking.policy.amount",
          "isRequired": true,
          "description": "...",
          "defaultValue": "100",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "chunking.policy.unit",
          "isRequired": true,
          "description": "...",
          "milliseconds": null,
          "seconds": null,
          "hours": null,
          "days": null,
          "months": null,
          "years": null,
          "points": null,
          "defaultValue": "points",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "sketchy.outlier.algorithm",
          "isRequired": false,
          "description": "...",
          "SKETCHY_MOVING_MAD": null,
          "defaultValue": "SKETCHY_MOVING_MAD",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "batch.outlier.algorithm",
          "isRequired": false,
          "description": "...",
          "RAD": null,
          "defaultValue": "RAD",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "global.statistics.min",
          "isRequired": false,
          "description": "minimum value",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "global.statistics.max",
          "isRequired": false,
          "description": "maximum value",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "global.statistics.mean",
          "isRequired": false,
          "description": "mean value",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "global.statistics.stddev",
          "isRequired": false,
          "description": "standard deviation value",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "zscore.cutoffs.normal",
          "isRequired": true,
          "description": "zscoreCutoffs levele for normal outlier",
          "defaultValue": "0.000000000000001",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "zscore.cutoffs.moderate",
          "isRequired": true,
          "description": "zscoreCutoffs levele for moderate outlier",
          "defaultValue": "1.5",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "zscore.cutoffs.severe",
          "isRequired": true,
          "description": "zscoreCutoffs levele for severe outlier",
          "defaultValue": "10.0",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "zscore.cutoffs.notEnoughData",
          "isRequired": false,
          "description": "zscoreCutoffs levele for notEnoughData outlier",
          "defaultValue": "100",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "smooth",
          "isRequired": false,
          "description": "do smoothing ?",
          "defaultValue": "false",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "decay",
          "isRequired": false,
          "description": "the decay",
          "defaultValue": "0.1",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "min.amount.to.predict",
          "isRequired": true,
          "description": "minAmountToPredict",
          "defaultValue": "100",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "min_zscore_percentile",
          "isRequired": false,
          "description": "minZscorePercentile",
          "defaultValue": "50.0",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "reservoir_size",
          "isRequired": false,
          "description": "the size of points reservoir",
          "defaultValue": "100",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "rpca.force.diff",
          "isRequired": false,
          "description": "No Description Provided.",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "rpca.lpenalty",
          "isRequired": false,
          "description": "No Description Provided.",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "rpca.min.records",
          "isRequired": false,
          "description": "No Description Provided.",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "rpca.spenalty",
          "isRequired": false,
          "description": "No Description Provided.",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "rpca.threshold",
          "isRequired": false,
          "description": "No Description Provided.",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        }
      ]
    },
    {
      "name": "EvaluateJsonPath",
      "description": "Evaluates one or more JsonPath expressions against the content of a FlowFile. The results of those expressions are assigned to Records Fieldsdepending on configuration of the Processor. JsonPaths are entered by adding user-defined properties; the name of the property maps to the Field Name into which the result will be placed. The value of the property must be a valid JsonPath expression. A Return Type of 'auto-detect' will make a determination based off the configured destination. If the JsonPath evaluates to a JSON array or JSON object and the Return Type is set to 'scalar' the Record will be routed to error. A Return Type of JSON can return scalar values if the provided JsonPath evaluates to the specified value. If the expression matches nothing, Fields will be created with empty strings as the value ",
      "component": "com.hurence.logisland.processor.EvaluateJsonPath",
      "type": "processor",
      "tags": [
        "JSON",
        "evaluate",
        "JsonPath"
      ],
      "dynamicProperties": [
        {
          "name": "A Record field",
          "value": "A JsonPath expression",
          "description": "will be set to any JSON objects that match the JsonPath. ",
          "isExpressionLanguageSupported": false
        }
      ]
    },
    {
      "name": "GenerateRandomRecord",
      "description": "This is a processor that make random records given an Avro schema",
      "component": "com.hurence.logisland.processor.GenerateRandomRecord",
      "type": "processor",
      "tags": [
        "record",
        "avro",
        "generator"
      ],
      "properties": [
        {
          "name": "avro.output.schema",
          "isRequired": true,
          "description": "the avro schema definition for the output serialization",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "min.events.count",
          "isRequired": true,
          "description": "the minimum number of generated events each run",
          "defaultValue": "10",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "max.events.count",
          "isRequired": true,
          "description": "the maximum number of generated events each run",
          "defaultValue": "200",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        }
      ]
    },
    {
      "name": "KafkaRecordStreamDebugger",
      "description": "No description provided.",
      "component": "com.hurence.logisland.stream.spark.KafkaRecordStreamDebugger",
      "type": "stream",
      "properties": [
        {
          "name": "kafka.error.topics",
          "isRequired": true,
          "description": "Sets the error topics Kafka topic name",
          "defaultValue": "_errors",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.input.topics",
          "isRequired": true,
          "description": "Sets the input Kafka topic name",
          "defaultValue": "_raw",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.output.topics",
          "isRequired": true,
          "description": "Sets the output Kafka topic name",
          "defaultValue": "_records",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.metrics.topic",
          "isRequired": false,
          "description": "a topic to send metrics of processing. no output if not set",
          "defaultValue": "_metrics",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "avro.input.schema",
          "isRequired": false,
          "description": "the avro schema definition",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "avro.output.schema",
          "isRequired": false,
          "description": "the avro schema definition for the output serialization",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.input.topics.serializer",
          "isRequired": false,
          "description": "No Description Provided.",
          "kryo serialization": "serialize events as json blocs",
          "avro serialization": "serialize events as json blocs",
          "avro serialization": "serialize events as avro blocs",
          "no serialization": "send events as bytes",
          "defaultValue": "com.hurence.logisland.serializer.KryoSerializer",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.output.topics.serializer",
          "isRequired": false,
          "description": "No Description Provided.",
          "kryo serialization": "serialize events as json blocs",
          "avro serialization": "serialize events as json blocs",
          "avro serialization": "serialize events as avro blocs",
          "no serialization": "send events as bytes",
          "defaultValue": "com.hurence.logisland.serializer.KryoSerializer",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.error.topics.serializer",
          "isRequired": false,
          "description": "No Description Provided.",
          "kryo serialization": "serialize events as json blocs",
          "avro serialization": "serialize events as json blocs",
          "avro serialization": "serialize events as avro blocs",
          "no serialization": "send events as bytes",
          "defaultValue": "com.hurence.logisland.serializer.JsonSerializer",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.topic.autoCreate",
          "isRequired": false,
          "description": "define wether a topic should be created automatically if not already exists",
          "defaultValue": "true",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.topic.default.partitions",
          "isRequired": false,
          "description": "if autoCreate is set to true, this will set the number of partition at topic creation time",
          "defaultValue": "20",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.topic.default.replicationFactor",
          "isRequired": false,
          "description": "if autoCreate is set to true, this will set the number of replica for each partition at topic creation time",
          "defaultValue": "3",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.metadata.broker.list",
          "isRequired": true,
          "description": "a comma separated list of host:port brokers",
          "defaultValue": "sandbox:9092",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.zookeeper.quorum",
          "isRequired": true,
          "description": "No Description Provided.",
          "defaultValue": "sandbox:2181",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.manual.offset.reset",
          "isRequired": false,
          "description": "Sets manually an initial offset in ZooKeeper: smallest (automatically reset the offset to the smallest offset), largest (automatically reset the offset to the largest offset), anything else (throw exception to the consumer)",
          "largest offset": "the offset to the largest offset",
          "smallest offset": "the offset to the smallest offset",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "logisland.agent.quorum",
          "isRequired": true,
          "description": "the stream needs to know how to reach Agent REST api in order to live update its processors",
          "defaultValue": "sandbox:8081",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "logisland.agent.pull.throttling",
          "isRequired": false,
          "description": "wait every x batch to pull agent for new conf",
          "defaultValue": "10",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        }
      ]
    },
    {
      "name": "KafkaRecordStreamHDFSBurner",
      "description": "No description provided.",
      "component": "com.hurence.logisland.stream.spark.KafkaRecordStreamHDFSBurner",
      "type": "stream",
      "properties": [
        {
          "name": "kafka.error.topics",
          "isRequired": true,
          "description": "Sets the error topics Kafka topic name",
          "defaultValue": "_errors",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.input.topics",
          "isRequired": true,
          "description": "Sets the input Kafka topic name",
          "defaultValue": "_raw",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.output.topics",
          "isRequired": true,
          "description": "Sets the output Kafka topic name",
          "defaultValue": "_records",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.metrics.topic",
          "isRequired": false,
          "description": "a topic to send metrics of processing. no output if not set",
          "defaultValue": "_metrics",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "avro.input.schema",
          "isRequired": false,
          "description": "the avro schema definition",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "avro.output.schema",
          "isRequired": false,
          "description": "the avro schema definition for the output serialization",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.input.topics.serializer",
          "isRequired": false,
          "description": "No Description Provided.",
          "kryo serialization": "serialize events as json blocs",
          "avro serialization": "serialize events as json blocs",
          "avro serialization": "serialize events as avro blocs",
          "no serialization": "send events as bytes",
          "defaultValue": "com.hurence.logisland.serializer.KryoSerializer",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.output.topics.serializer",
          "isRequired": false,
          "description": "No Description Provided.",
          "kryo serialization": "serialize events as json blocs",
          "avro serialization": "serialize events as json blocs",
          "avro serialization": "serialize events as avro blocs",
          "no serialization": "send events as bytes",
          "defaultValue": "com.hurence.logisland.serializer.KryoSerializer",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.error.topics.serializer",
          "isRequired": false,
          "description": "No Description Provided.",
          "kryo serialization": "serialize events as json blocs",
          "avro serialization": "serialize events as json blocs",
          "avro serialization": "serialize events as avro blocs",
          "no serialization": "send events as bytes",
          "defaultValue": "com.hurence.logisland.serializer.JsonSerializer",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.topic.autoCreate",
          "isRequired": false,
          "description": "define wether a topic should be created automatically if not already exists",
          "defaultValue": "true",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.topic.default.partitions",
          "isRequired": false,
          "description": "if autoCreate is set to true, this will set the number of partition at topic creation time",
          "defaultValue": "20",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.topic.default.replicationFactor",
          "isRequired": false,
          "description": "if autoCreate is set to true, this will set the number of replica for each partition at topic creation time",
          "defaultValue": "3",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.metadata.broker.list",
          "isRequired": true,
          "description": "a comma separated list of host:port brokers",
          "defaultValue": "sandbox:9092",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.zookeeper.quorum",
          "isRequired": true,
          "description": "No Description Provided.",
          "defaultValue": "sandbox:2181",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.manual.offset.reset",
          "isRequired": false,
          "description": "Sets manually an initial offset in ZooKeeper: smallest (automatically reset the offset to the smallest offset), largest (automatically reset the offset to the largest offset), anything else (throw exception to the consumer)",
          "largest offset": "the offset to the largest offset",
          "smallest offset": "the offset to the smallest offset",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "logisland.agent.quorum",
          "isRequired": true,
          "description": "the stream needs to know how to reach Agent REST api in order to live update its processors",
          "defaultValue": "sandbox:8081",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "logisland.agent.pull.throttling",
          "isRequired": false,
          "description": "wait every x batch to pull agent for new conf",
          "defaultValue": "10",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "output.folder.path",
          "isRequired": true,
          "description": "the location where to put files : file:///tmp/out",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "output.format",
          "isRequired": true,
          "description": "can be parquet, orc csv",
          "parquet": null,
          "txt": null,
          "json": null,
          "json": null,
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "record.type",
          "isRequired": true,
          "description": "the type of event to filter",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "num.partitions",
          "isRequired": false,
          "description": "the numbers of physical files on HDFS",
          "defaultValue": "4",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "exclude.errors",
          "isRequired": false,
          "description": "do we include records with errors ?",
          "defaultValue": "true",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        }
      ]
    },
    {
      "name": "KafkaRecordStreamParallelProcessing",
      "description": "No description provided.",
      "component": "com.hurence.logisland.stream.spark.KafkaRecordStreamParallelProcessing",
      "type": "stream",
      "properties": [
        {
          "name": "kafka.error.topics",
          "isRequired": true,
          "description": "Sets the error topics Kafka topic name",
          "defaultValue": "_errors",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.input.topics",
          "isRequired": true,
          "description": "Sets the input Kafka topic name",
          "defaultValue": "_raw",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.output.topics",
          "isRequired": true,
          "description": "Sets the output Kafka topic name",
          "defaultValue": "_records",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.metrics.topic",
          "isRequired": false,
          "description": "a topic to send metrics of processing. no output if not set",
          "defaultValue": "_metrics",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "avro.input.schema",
          "isRequired": false,
          "description": "the avro schema definition",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "avro.output.schema",
          "isRequired": false,
          "description": "the avro schema definition for the output serialization",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.input.topics.serializer",
          "isRequired": false,
          "description": "No Description Provided.",
          "kryo serialization": "serialize events as json blocs",
          "avro serialization": "serialize events as json blocs",
          "avro serialization": "serialize events as avro blocs",
          "no serialization": "send events as bytes",
          "defaultValue": "com.hurence.logisland.serializer.KryoSerializer",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.output.topics.serializer",
          "isRequired": false,
          "description": "No Description Provided.",
          "kryo serialization": "serialize events as json blocs",
          "avro serialization": "serialize events as json blocs",
          "avro serialization": "serialize events as avro blocs",
          "no serialization": "send events as bytes",
          "defaultValue": "com.hurence.logisland.serializer.KryoSerializer",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.error.topics.serializer",
          "isRequired": false,
          "description": "No Description Provided.",
          "kryo serialization": "serialize events as json blocs",
          "avro serialization": "serialize events as json blocs",
          "avro serialization": "serialize events as avro blocs",
          "no serialization": "send events as bytes",
          "defaultValue": "com.hurence.logisland.serializer.JsonSerializer",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.topic.autoCreate",
          "isRequired": false,
          "description": "define wether a topic should be created automatically if not already exists",
          "defaultValue": "true",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.topic.default.partitions",
          "isRequired": false,
          "description": "if autoCreate is set to true, this will set the number of partition at topic creation time",
          "defaultValue": "20",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.topic.default.replicationFactor",
          "isRequired": false,
          "description": "if autoCreate is set to true, this will set the number of replica for each partition at topic creation time",
          "defaultValue": "3",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.metadata.broker.list",
          "isRequired": true,
          "description": "a comma separated list of host:port brokers",
          "defaultValue": "sandbox:9092",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.zookeeper.quorum",
          "isRequired": true,
          "description": "No Description Provided.",
          "defaultValue": "sandbox:2181",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.manual.offset.reset",
          "isRequired": false,
          "description": "Sets manually an initial offset in ZooKeeper: smallest (automatically reset the offset to the smallest offset), largest (automatically reset the offset to the largest offset), anything else (throw exception to the consumer)",
          "largest offset": "the offset to the largest offset",
          "smallest offset": "the offset to the smallest offset",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "logisland.agent.quorum",
          "isRequired": true,
          "description": "the stream needs to know how to reach Agent REST api in order to live update its processors",
          "defaultValue": "sandbox:8081",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "logisland.agent.pull.throttling",
          "isRequired": false,
          "description": "wait every x batch to pull agent for new conf",
          "defaultValue": "10",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "max.results.count",
          "isRequired": false,
          "description": "the max number of rows to output. (-1 for no limit)",
          "defaultValue": "-1",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "sql.query",
          "isRequired": true,
          "description": "The SQL query to execute, please note that the table name must exists in input topics names",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        }
      ]
    },
    {
      "name": "KafkaRecordStreamSQLAggregator",
      "description": "This is a stream capable of SQL query interpretations",
      "component": "com.hurence.logisland.stream.spark.KafkaRecordStreamSQLAggregator",
      "type": "stream",
      "tags": [
        "stream",
        "SQL",
        "query",
        "record"
      ],
      "properties": [
        {
          "name": "kafka.error.topics",
          "isRequired": true,
          "description": "Sets the error topics Kafka topic name",
          "defaultValue": "_errors",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.input.topics",
          "isRequired": true,
          "description": "Sets the input Kafka topic name",
          "defaultValue": "_raw",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.output.topics",
          "isRequired": true,
          "description": "Sets the output Kafka topic name",
          "defaultValue": "_records",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.metrics.topic",
          "isRequired": false,
          "description": "a topic to send metrics of processing. no output if not set",
          "defaultValue": "_metrics",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "avro.input.schema",
          "isRequired": false,
          "description": "the avro schema definition",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "avro.output.schema",
          "isRequired": false,
          "description": "the avro schema definition for the output serialization",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.input.topics.serializer",
          "isRequired": false,
          "description": "No Description Provided.",
          "kryo serialization": "serialize events as json blocs",
          "avro serialization": "serialize events as json blocs",
          "avro serialization": "serialize events as avro blocs",
          "no serialization": "send events as bytes",
          "defaultValue": "com.hurence.logisland.serializer.KryoSerializer",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.output.topics.serializer",
          "isRequired": false,
          "description": "No Description Provided.",
          "kryo serialization": "serialize events as json blocs",
          "avro serialization": "serialize events as json blocs",
          "avro serialization": "serialize events as avro blocs",
          "no serialization": "send events as bytes",
          "defaultValue": "com.hurence.logisland.serializer.KryoSerializer",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.error.topics.serializer",
          "isRequired": false,
          "description": "No Description Provided.",
          "kryo serialization": "serialize events as json blocs",
          "avro serialization": "serialize events as json blocs",
          "avro serialization": "serialize events as avro blocs",
          "no serialization": "send events as bytes",
          "defaultValue": "com.hurence.logisland.serializer.JsonSerializer",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.topic.autoCreate",
          "isRequired": false,
          "description": "define wether a topic should be created automatically if not already exists",
          "defaultValue": "true",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.topic.default.partitions",
          "isRequired": false,
          "description": "if autoCreate is set to true, this will set the number of partition at topic creation time",
          "defaultValue": "20",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.topic.default.replicationFactor",
          "isRequired": false,
          "description": "if autoCreate is set to true, this will set the number of replica for each partition at topic creation time",
          "defaultValue": "3",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.metadata.broker.list",
          "isRequired": true,
          "description": "a comma separated list of host:port brokers",
          "defaultValue": "sandbox:9092",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.zookeeper.quorum",
          "isRequired": true,
          "description": "No Description Provided.",
          "defaultValue": "sandbox:2181",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "kafka.manual.offset.reset",
          "isRequired": false,
          "description": "Sets manually an initial offset in ZooKeeper: smallest (automatically reset the offset to the smallest offset), largest (automatically reset the offset to the largest offset), anything else (throw exception to the consumer)",
          "largest offset": "the offset to the largest offset",
          "smallest offset": "the offset to the smallest offset",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "logisland.agent.quorum",
          "isRequired": true,
          "description": "the stream needs to know how to reach Agent REST api in order to live update its processors",
          "defaultValue": "sandbox:8081",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "logisland.agent.pull.throttling",
          "isRequired": false,
          "description": "wait every x batch to pull agent for new conf",
          "defaultValue": "10",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "max.results.count",
          "isRequired": false,
          "description": "the max number of rows to output. (-1 for no limit)",
          "defaultValue": "-1",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "sql.query",
          "isRequired": true,
          "description": "The SQL query to execute, please note that the table name must exists in input topics names",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "output.record.type",
          "isRequired": false,
          "description": "the output type of the record",
          "defaultValue": "aggregation",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        }
      ]
    },
    {
      "name": "KafkaStreamProcessingEngine",
      "description": "No description provided.",
      "component": "com.hurence.logisland.engine.spark.KafkaStreamProcessingEngine",
      "type": "engine",
      "properties": [
        {
          "name": "spark.app.name",
          "isRequired": true,
          "description": "Tha application name",
          "defaultValue": "logisland",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "spark.master",
          "isRequired": true,
          "description": "The url to Spark Master",
          "defaultValue": "local[2]",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "spark.yarn.deploy-mode",
          "isRequired": false,
          "description": "The yarn deploy mode",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "spark.yarn.queue",
          "isRequired": false,
          "description": "The name of the YARN queue",
          "defaultValue": "default",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "spark.driver.memory",
          "isRequired": false,
          "description": "The memory size for Spark driver",
          "defaultValue": "512m",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "spark.executor.memory",
          "isRequired": false,
          "description": "The memory size for Spark executors",
          "defaultValue": "1g",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "spark.driver.cores",
          "isRequired": false,
          "description": "The number of cores for Spark driver",
          "defaultValue": "4",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "spark.executor.cores",
          "isRequired": false,
          "description": "The number of cores for Spark driver",
          "defaultValue": "1",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "spark.executor.instances",
          "isRequired": false,
          "description": "The number of instances for Spark app",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "spark.serializer",
          "isRequired": false,
          "description": "Class to use for serializing objects that will be sent over the network or need to be cached in serialized form",
          "defaultValue": "org.apache.spark.serializer.KryoSerializer",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "spark.streaming.blockInterval",
          "isRequired": false,
          "description": "Interval at which data received by Spark Streaming receivers is chunked into blocks of data before storing them in Spark. Minimum recommended - 50 ms",
          "defaultValue": "350",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "spark.streaming.kafka.maxRatePerPartition",
          "isRequired": false,
          "description": "Maximum rate (number of records per second) at which data will be read from each Kafka partition",
          "defaultValue": "5000",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "spark.streaming.batchDuration",
          "isRequired": true,
          "description": "No Description Provided.",
          "defaultValue": "2000",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "spark.streaming.backpressure.enabled",
          "isRequired": false,
          "description": "This enables the Spark Streaming to control the receiving rate based on the current batch scheduling delays and processing times so that the system receives only as fast as the system can process.",
          "defaultValue": "false",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "spark.streaming.unpersist",
          "isRequired": false,
          "description": "Force RDDs generated and persisted by Spark Streaming to be automatically unpersisted from Spark's memory. The raw input data received by Spark Streaming is also automatically cleared. Setting this to false will allow the raw data and persisted RDDs to be accessible outside the streaming application as they will not be cleared automatically. But it comes at the cost of higher memory usage in Spark.",
          "defaultValue": "false",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "spark.ui.port",
          "isRequired": false,
          "description": "No Description Provided.",
          "defaultValue": "4050",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "spark.streaming.timeout",
          "isRequired": false,
          "description": "No Description Provided.",
          "defaultValue": "-1",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "spark.streaming.kafka.maxRetries",
          "isRequired": false,
          "description": "Maximum rate (number of records per second) at which data will be read from each Kafka partition",
          "defaultValue": "3",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "spark.streaming.ui.retainedBatches",
          "isRequired": false,
          "description": "How many batches the Spark Streaming UI and status APIs remember before garbage collecting.",
          "defaultValue": "200",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "spark.streaming.receiver.writeAheadLog.enable",
          "isRequired": false,
          "description": "Enable write ahead logs for receivers. All the input data received through receivers will be saved to write ahead logs that will allow it to be recovered after driver failures.",
          "defaultValue": "false",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "spark.yarn.maxAppAttempts",
          "isRequired": false,
          "description": "Because Spark driver and Application Master share a single JVM, any error in Spark driver stops our long-running job. Fortunately it is possible to configure maximum number of attempts that will be made to re-run the application. It is reasonable to set higher value than default 2 (derived from YARN cluster property yarn.resourcemanager.am.max-attempts). 4 works quite well, higher value may cause unnecessary restarts even if the reason of the failure is permanent.",
          "defaultValue": "4",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "spark.yarn.am.attemptFailuresValidityInterval",
          "isRequired": false,
          "description": "If the application runs for days or weeks without restart or redeployment on highly utilized cluster, 4 attempts could be exhausted in few hours. To avoid this situation, the attempt counter should be reset on every hour of so.",
          "defaultValue": "1h",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "spark.yarn.max.executor.failures",
          "isRequired": false,
          "description": "a maximum number of executor failures before the application fails. By default it is max(2 * num executors, 3), well suited for batch jobs but not for long-running jobs. The property comes with corresponding validity interval which also should be set.8 * num_executors",
          "defaultValue": "20",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "spark.yarn.executor.failuresValidityInterval",
          "isRequired": false,
          "description": "If the application runs for days or weeks without restart or redeployment on highly utilized cluster, x attempts could be exhausted in few hours. To avoid this situation, the attempt counter should be reset on every hour of so.",
          "defaultValue": "1h",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "spark.task.maxFailures",
          "isRequired": false,
          "description": "For long-running jobs you could also consider to boost maximum number of task failures before giving up the job. By default tasks will be retried 4 times and then job fails.",
          "defaultValue": "8",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        }
      ]
    },
    {
      "name": "MatchQuery",
      "description": "Query matching based on `Luwak <http://www.confluent.io/blog/real-time-full-text-search-with-luwak-and-samza/>`_\n\nyou can use this processor to handle custom events defined by lucene queries\na new record is added to output each time a registered query is matched\n\nA query is expressed as a lucene query against a field like for example: \n\n.. code-block::\n\n\tmessage:'bad exception'\n\terror_count:[10 TO *]\n\tbytes_out:5000\n\tuser_name:tom*\n\nPlease read the `Lucene syntax guide <https://lucene.apache.org/core/5_5_0/queryparser/org/apache/lucene/queryparser/classic/package-summary.html#package_description>`_ for supported operations\n\n.. warning::\n\n\tdon't forget to set numeric fields property to handle correctly numeric ranges queries",
      "component": "com.hurence.logisland.processor.MatchQuery",
      "type": "processor",
      "tags": [
        "analytic",
        "percolator",
        "record",
        "record",
        "query",
        "lucene"
      ],
      "properties": [
        {
          "name": "numeric.fields",
          "isRequired": false,
          "description": "a comma separated string of numeric field to be matched",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "output.record.type",
          "isRequired": false,
          "description": "the output type of the record",
          "defaultValue": "alert_match",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "include.input.records",
          "isRequired": false,
          "description": "if set to true all the input records are copied to output",
          "defaultValue": "true",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        }
      ],
      "dynamicProperties": [
        {
          "name": "query",
          "value": "some Lucene query",
          "description": "generate a new record when this query is matched",
          "isExpressionLanguageSupported": true
        }
      ]
    },
    {
      "name": "NormalizeFields",
      "description": "Changes the name of a field according to a provided name mapping\n...",
      "component": "com.hurence.logisland.processor.NormalizeFields",
      "type": "processor",
      "tags": [
        "record",
        "fields",
        "normalizer"
      ],
      "properties": [
        {
          "name": "conflict.resolution.policy",
          "isRequired": true,
          "description": "waht to do when a field with the same name already exists ?",
          "nothing to do": "leave record as it was",
          "overwrite existing field": "if field already exist",
          "keep only old field and delete the other": "keep only old field and delete the other",
          "keep old field and new one": "creates an alias for the new field",
          "defaultValue": "do_nothing",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        }
      ],
      "dynamicProperties": [
        {
          "name": "alternative mapping",
          "value": "a comma separated list of possible field name",
          "description": "when a field has a name contained in the list it will be renamed with this property field name",
          "isExpressionLanguageSupported": true
        }
      ]
    },
    {
      "name": "ParseProperties",
      "description": "Parse a field made of key=value fields separated by spaces\na string like \"a=1 b=2 c=3\" will add a,b & c fields, respectively with values 1,2 & 3 to the current Record",
      "component": "com.hurence.logisland.processor.ParseProperties",
      "type": "processor",
      "tags": [
        "record",
        "properties",
        "parser"
      ],
      "properties": [
        {
          "name": "properties.field",
          "isRequired": true,
          "description": "the field containing the properties to split and treat",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        }
      ]
    },
    {
      "name": "PutElasticsearch",
      "description": "This is a processor that puts records to ES",
      "component": "com.hurence.logisland.processor.elasticsearch.PutElasticsearch",
      "type": "processor",
      "tags": [
        "record",
        "elasticsearch",
        "sink",
        "record"
      ],
      "properties": [
        {
          "name": "cluster.name",
          "isRequired": true,
          "description": "Name of the ES cluster (for example, elasticsearch_brew). Defaults to 'elasticsearch'",
          "defaultValue": "elasticsearch",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "hosts",
          "isRequired": true,
          "description": "ElasticSearch Hosts, which should be comma separated and colon for hostname/port host1:port,host2:port,....  For example testcluster:9300.",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "ssl.context.service",
          "isRequired": false,
          "description": "The SSL Context Service used to provide client certificate information for TLS/SSL connections. This service only applies if the Shield plugin is available.",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "shield.location",
          "isRequired": false,
          "description": "Specifies the path to the JAR for the Elasticsearch Shield plugin. If the Elasticsearch cluster has been secured with the Shield plugin, then the Shield plugin JAR must also be available to this processor. Note: Do NOT place the Shield JAR into NiFi's lib/ directory, doing so will prevent the Shield plugin from being loaded.",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "username",
          "isRequired": false,
          "description": "Username to access the Elasticsearch cluster",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "password",
          "isRequired": false,
          "description": "Password to access the Elasticsearch cluster",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": true,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "ping.timeout",
          "isRequired": true,
          "description": "The ping timeout used to determine when a node is unreachable. For example, 5s (5 seconds). If non-local recommended is 30s",
          "defaultValue": "5s",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "sampler.interval",
          "isRequired": true,
          "description": "How often to sample / ping the nodes listed and connected. For example, 5s (5 seconds). If non-local recommended is 30s.",
          "defaultValue": "5s",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "default.index",
          "isRequired": true,
          "description": "The name of the index to insert into",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": true
        },
        {
          "name": "default.type",
          "isRequired": true,
          "description": "The type of this document (used by Elasticsearch for indexing and searching)",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": true
        },
        {
          "name": "charset",
          "isRequired": true,
          "description": "Specifies the character set of the document data.",
          "defaultValue": "UTF-8",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "batch.size",
          "isRequired": false,
          "description": "The preferred number of Records to setField to the database in a single transaction",
          "defaultValue": "1000",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "bulk.size",
          "isRequired": false,
          "description": "bulk size in MB",
          "defaultValue": "5",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "concurrent.requests",
          "isRequired": false,
          "description": "setConcurrentRequests",
          "defaultValue": "2",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "flush.interval",
          "isRequired": false,
          "description": "flush interval in sec",
          "defaultValue": "5",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "timebased.index",
          "isRequired": true,
          "description": "do we add a date suffix",
          "No date": "no date added to default index",
          "Today's date": "today's date added to default index",
          "yesterday's date": "yesterday's date added to default index",
          "defaultValue": "no",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "es.index.field",
          "isRequired": false,
          "description": "the name of the event field containing es index type => will override index value if set",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "es.type.field",
          "isRequired": false,
          "description": "the name of the event field containing es doc type => will override type value if set",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        }
      ]
    },
    {
      "name": "RemoveFields",
      "description": "Removes a list of fields defined by a comma separated list of field names",
      "component": "com.hurence.logisland.processor.RemoveFields",
      "type": "processor",
      "tags": [
        "record",
        "fields",
        "remove",
        "delete"
      ],
      "properties": [
        {
          "name": "fields.to.remove",
          "isRequired": true,
          "description": "the comma separated list of field names (e.g. \"policyid,date_raw\"",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        }
      ]
    },
    {
      "name": "SampleRecords",
      "description": "Query matching based on `Luwak <http://www.confluent.io/blog/real-time-full-text-search-with-luwak-and-samza/>`_\n\nyou can use this processor to handle custom events defined by lucene queries\na new record is added to output each time a registered query is matched\n\nA query is expressed as a lucene query against a field like for example: \n\n.. code-block::\n   message:'bad exception'\n   error_count:[10 TO *]\n   bytes_out:5000\n   user_name:tom*\n\nPlease read the `Lucene syntax guide <https://lucene.apache.org/core/5_5_0/queryparser/org/apache/lucene/queryparser/classic/package-summary.html#package_description>`_ for supported operations\n\n.. warning::\n   don't forget to set numeric fields property to handle correctly numeric ranges queries",
      "component": "com.hurence.logisland.processor.SampleRecords",
      "type": "processor",
      "tags": [
        "analytic",
        "sampler",
        "record",
        "iot",
        "timeseries"
      ],
      "properties": [
        {
          "name": "record.value.field",
          "isRequired": false,
          "description": "the name of the numeric field to sample",
          "defaultValue": "record_value",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "record.time.field",
          "isRequired": false,
          "description": "the name of the time field to sample",
          "defaultValue": "record_time",
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "sampling.algorithm",
          "isRequired": true,
          "description": "the implementation of the algorithm",
          "none": null,
          "lttb": null,
          "average": null,
          "first_item": null,
          "min_max": null,
          "mode_median": null,
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "sampling.parameter",
          "isRequired": true,
          "description": "the parmater of the algorithm",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        }
      ]
    },
    {
      "name": "SplitTextMultiline",
      "description": "No description provided.",
      "component": "com.hurence.logisland.processor.SplitTextMultiline",
      "type": "processor",
      "properties": [
        {
          "name": "regex",
          "isRequired": true,
          "description": "the regex to match",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "fields",
          "isRequired": true,
          "description": "a comma separated list of fields corresponding to matching groups",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        },
        {
          "name": "event.type",
          "isRequired": true,
          "description": "the type of event",
          "defaultValue": null,
          "isDynamic": false,
          "isSensitive": false,
          "isExpressionLanguageSupported": false
        }
      ]
    }
  ]
}
