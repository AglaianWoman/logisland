version: 0.1
documentation: LogIsland analytics main config file. Put here every engine or component config

components:
  # Main event streaming engine
  - component: com.hurence.logisland.engine.SparkStreamProcessingEngine
    type: engine
    version: 0.1.0
    documentation: Main Logisland job entry point
    configuration:


      spark.executorMemory: 4g
      spark.checkpointingDirectory: file:///tmp
      spark.appName: My first stream component
      spark.streaming.batchDuration: 2000
      spark.serializer: org.apache.spark.serializer.KryoSerializer
      spark.streaming.backpressure.enabled: true
      spark.streaming.unpersist: false
      spark.streaming.blockInterval: 350
      spark.streaming.kafka.maxRatePerPartition: 500
      spark.streaming.timeout: -1
      spark.ui.port: 4050
      kafka.metadata.broker.list: localhost:9092
      kafka.zookeeper.quorum: localhost:2181
      output.event.serializer: com.hurence.logisland.serializer.EventKryoSerializer
      input.event.serializer: com.hurence.logisland.serializer.EventKryoSerializer


  # An elasticsearc compo
  - component: com.hurence.logisland.processor.elasticsearch.PutElasticsearch
    type: processor
    version: 0.1.0
    documentation: a processor that trace the processed events
    configuration:
      kafka.input.topics: logisland-mock-out
      kafka.output.topics: none
      kafka.error.topics: none
      index: centralisation
      type: traker1
      hosts: localhost:9300
      batch.size: 200
      timebased.index: yesterday
      es.index.field: es_index

  # Generate random events based on an avro schema
  - component: com.hurence.logisland.processor.parser.SplitText
    type: parser
    version: 0.1.0
    documentation: a parser that produce events from a REGEX
    configuration:
      kafka.input.topics: logisland-mock-in
      kafka.output.topics: logisland-mock-out
      kafka.error.topics: logisland-error
      event.type: log_traker
      value.regex: (\D{3}\s+\d{1,2} \d{2}:\d{2}:\d{2})\s+(\S*)\s+(?:date=(\S*)\s+)?(?:time=(\S*)\s+)?(?:devname=(\S*)\s+)?(?:devid=(\S*)\s+)?(?:logid=(\S*)\s+)?(?:type=(\S*)\s+)?(?:subtype=(\S*)\s+)?(?:level=(\S*)\s+)?(?:vd=(\S*)\s+)?(?:srcip=(\S*)\s+)?(?:srcport=(\S*)\s+)?(?:srcintf=(\S*)\s+)?(?:dstip=(\S*)\s+)?(?:dstport=(\S*)\s+)?(?:dstintf=(\S*)\s+)?(?:poluuid=(\S*)\s+)?(?:sessionid=(\S*)\s+)?(?:proto=(\S*)\s+)?(?:action=(\S*)\s+)?(?:policyid=(\S*)\s+)?(?:dstcountry=(\S*)\s+)?(?:srccountry=(\S* \S*)\s+)?(?:tran*disp=(\S*)\s+)?(?:trans*ip=(\S*)\s+)?(?:trans*port=(\S*)\s+)?(?:service=(\S*)\s+)?(?:duration=(\S*)\s+)?(?:sentbyte=(\S*)\s+)?(?:rcvdbyte=(\S*)\s+)?(?:sentpkt=(\S*)\s+)?(?:rcvdpkt=(\S*)\s+)?(?:appcat=(\S*)\s+)?(?:crscore=(\S*)\s+)?(?:craction=(\S*)\s+)?(?:crlevel=(\S*)\s+)?
      value.fields: raw_content,line_date,host,date,time,devname,devid,logid,type,subtype,level,vd,src_ip,src_port,src_inf,dest_ip,dest_port,dest_inf,pol_uuid,session_id,proto,action,policy_id,dest_country,src_country,tran_isp,tran_ip,tran_port,service,duration,bytes_out,bytes_in,packets_out,packets_in,app_cat,cr_score,cr_action,cr_level
      key.regex: (\S*):(\S*)
      key.fields: es_index,host_name